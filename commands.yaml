---
ab:
  description: |
    ab is a tool for benchmarking your Apache Hypertext Transfer Protocol (HTTP)
    server. It is designed to give you an impression of how your current Apache
    installation performs. This especially shows you how many requests per
    second your Apache installation is capable of serving.
  commands:
    - description: |
        tell ab to fire 1000 single requests with 2 multiple requests at a time.
      command: |
        ab -n 1000 -c 2 https://jpcercal.com/

cat:
  description: |
    concatenate files and print on the standard output.
  commands:
    - description: |
        print the content of the .gitignore file of the current dir.
      command: |
        cat .gitignore
    - description: |
        print the content of the ~/.kube/config file.
      command: |
        cat ~/.kube/config
    - description: |
        print the content of the ~/.ssh/id_ed25519.pub file.
      command: |
        cat ~/.ssh/id_ed25519.pub
    - description: |
        print the content of the ~/.ssh/known_hosts file.
      command: |
        cat ~/.ssh/known_hosts
    - description: |
        print the content of the ~/.zshrc file.
      command: |
        cat ~/.zshrc

composer:
  description: |
    composer is a tool for dependency management in PHP. It allows you to
    declare the libraries your project depends on and it will manage
    (install/update) them for you.
  commands:
    - description: |
        set the gitlab and github oauth token to be used on composer globally.
      command: |
        composer config
          --global
          --no-interaction
          --auth gitlab-token.gitlab.com ${GITLAB_USER_TOKEN} &&
        composer config
          --global
          --no-interaction
          --auth github-oauth.github.com ${GITHUB_USER_TOKEN}
    - description: |
        the composer install command reads the composer.json file from the
        current directory, resolves the dependencies, and installs them into
        vendor.
      command: |
        composer install

docker:
  description: |
    docker is a platform designed to help developers build, share, and run
    container applications. We handle the tedious setup, so you can focus on the
    code.
  commands:
    - description: |
        docker build builds an image from a Dockerfile while setting build-time
        variables.
      command: |
        docker build .
          --build-arg argumentName=argumentValue
    - description: |
        to use the docker mutagen official extension you must tell docker to use
        it either globally or locally on each execution, this command set the
        mutagen context as your global default.
      command: |
        docker context use desktop-linux-mutagen
    - description: |
        print the OS and architecture of the Docker image `<docker-image>`.
      command: |
        docker inspect --format='{{.Os}}/{{.Architecture}}' <docker-image>
    - description: |
        logs the user jpcercal in.
      command: |
        docker login -u jpcercal
    - description: |
        list all docker processes that are running right now.
      command: |
        docker ps
    - description: |
        run the maildev/maildev docker image and allocate the local port 1080
        and 1025 to it.
      command: |
        docker run --rm -p 1080:1080 -p 1025:1025 maildev/maildev
    - description: |
        run the latest version of the ubuntu docker image iteractively while
        it creates a volume with the content of the current directory onto /data
        and gain access to the container bash after all.
      command: |
        docker run --rm -it -v "$(pwd)":/data ubuntu:latest bash
    - description: |
        stop all the containers that are running at the moment, remove all
        containers, remove all available network interfaces, remove all the
        docker images.
      command: |
        docker stop $(docker ps -aq) &&
        docker rm $(docker ps -aq);
        docker volume rm $(docker volume ls -q);
        docker network rm $(docker networkls -q);
        docker image rm --force $(docker images --filter reference="*" --quiet)
    - description: |
        list all the docker volumes.
      command: |
        docker volume ls
    - description: |
        call docker-compose to spin up all the containers while removing all
        the orphans.
      command: |
        docker-compose up --remove-orphans

ls:
  description: |
    list directory contents.
  commands:
    - description: |
        list the content of the current directly in a list, human-readable
        including all the hidden files.
      command: |
        ls -lha

spryker:
  description: |
    spryker is the leading composable commerce platform for enterprises with
    sophisticated business models to enable growth, innovation, and
    differentiation.
  commands:
    - description: |
        spin up the cli container and run the composer install command
        once it's up running.
      command: |
        docker/sdk cli composer install
    - description: |
        spin up the cli container and run the console with the
        code:sniff:style command to fix all the files that do not
        match the current rules/constrainst defined on the project.
      command: |
        docker/sdk cli vendor/bin/console c:s:s -f
    - description: |
        spin up the cli container and run the console with the propel:install
        command which will run config convert, create database, postgres
        compatibility, copy schemas, runs Diff, build models and migrate tasks.
      command: |
        docker/sdk cli vendor/bin/console propel:install
    - description: |
        use git to clone the content of the repository spryker/docker-sdk
        onto the current directory. Spryker Docker SDK helps to set up a
        Docker environment for your Spryker project.
      command: |
        git clone git@github.com:spryker/docker-sdk.git docker
    - description: |
        prepare all the files to run the application based on the
        deploy.dev.yml file defined on the project root dir of any
        spryker installation.
      command: |
        docker/sdk boot -s deploy.dev.yml
    - description: |
        spin up the cli container and run npm to watch for changes
        in the Yves frontend files and rebuilds the assets when necessary.
      command: |
        docker/sdk cli npm run yves:watch
    - description: |
        prepare all the files to run the application based on the
        deploy.dev.yml file defined on the project root dir of any
        spryker installation & build the application including the
        data reset and the front assets compilation.
      command: |
        docker/sdk boot -s deploy.dev.yml &&
        docker/sdk up --data --build --assets
    - description: |
        spin up all the containers needed to run the application with the
        debug mode turned on.
      command: |
        docker/sdk up -x
    - description: |
        spin up the cli container and run yves with the router:debug
        command that will allow to see all the routes registered on yves.
      command: |
        docker/sdk cli yves router:debug
    - description: |
        spin up the cli container and run the vendor/bin/console with xdebug
        turned on.
      command: |
        docker/sdk console -x
    - description: |
        spin up the cli container and the console with the code:phpstan
        command that will run PHPStan static analyzer for project or core.
      command: |
        docker/sdk console code:phpstan
    - description: |
        spin up the cli container and run the console with the
        code:sniff:style command to fix all the files that do not
        match the current rules/constrainst defined on the project.
      command: |
        docker/sdk console code:sniff:style -f
    - description: |
        spin up the cli container and run the console with the
        data:import command that will executes your importers (full-import).
        Add this command with another name e.g.
        "new DataImportConsole('data:import:category')" to your
        ConsoleDependencyProvider and you can run a single DataImporter
        which is mapped to the latter part of the command name.
      command: |
        docker/sdk console data:import
    - description: |
        run spryker's data:import:cms-block command
      command: |
        docker/sdk console data:import:cms-block
    - description: |
        run spryker's data:import:glossary command
      command: |
        docker/sdk console data:import:glossary
    - description: |
        run spryker's transfer:generate command
      command: |
        docker/sdk console transfer:generate
    - description: |
        run spryker's docker/sdk reset command
      command: |
        docker/sdk reset
    - description: |
        run spryker's codecept build command
      command: |
        docker/sdk testing -x codecept build
    - description: |
        run spryker's codecept test command
      command: |
         docker/sdk testing -x codecept run -g ClassNameTest

echo:
  description: |
    write arguments to the standard output.
  commands:
    - description: |
        print a md5 hash of a given string.
      command: |
        echo jpcercal | md5

find:
  description: |
    walk a file hierarchy.
  commands:
    - description: |
        find recursively any file with the extension .php thaat contains on its
        content the regex class.*?Cest
      command: |
        find . -type f \( -name '*.php' \) -exec grep -EH '\class.*?Cest' {} \;

git:
  description: |
    git is a free and open source distributed version control system designed to
    handle everything from small to very large projects with speed and
    efficiency.
  commands:
    - description: |
        remove all local git branches except the ones being filtered out.
      command: |
        git branch --list
         | egrep --invert-match "(master|main|develop|\*)"
         | xargs git branch -D
    - description: |
        restore all working tree files to the latest commited state.
      command: |
        git checkout -- .
    - description: |
        record changes to the repository ammending it to the last
        commit and does not stop for editing the commit message.
      command: |
        git commit --amend --no-edit
    - description: |
        apply to the git client the global configuration for `user.email`.
      command: |
        git config --global user.email "jpcercal@gmail.com"
    - description: |
        apply to the git client the global configuration for `user.name`.
      command: |
        git config --global user.name "João Paulo Cercal"
    - description: |
        show changes between commits, commit and working tree, etc.
      command: |
        git diff
    - description: |
        git diff of all the staged changes for the next commit relative
        to the last commit.
      command: |
        git diff --cached
    - description: |
        clean up of the main branch with the latest changes from the remote
        branch.
      command: |
        git fetch --all --prune &&
        git checkout main &&
        git reset --hard origin/main &&
        git checkout -
    - description: |
        abort the process started by git rebase.
      command: |
        git rebase --abort
    - description: |
        continue the process started by git rebase.
      command: |
        git rebase --continue
    - description: |
        <description-of-the-command-here>
      command: |
        git rebase --skip
    - description: |
        <description-of-the-command-here>
      command: |
        git rebase -i HEAD~5
    - description: |
        <description-of-the-command-here>
      command: |
        git rebase origin/main
    - description: |
        <description-of-the-command-here>
      command: |
        git remote -v
    - description: |
        <description-of-the-command-here>
      command: |
        git restore --staged .
    - description: |
        <description-of-the-command-here>
      command: |
        git restore .
    - description: |
        <description-of-the-command-here>
      command: |
        git stash
    - description: |
        <description-of-the-command-here>
      command: |
        git stash pop
    - description: |
        <description-of-the-command-here>
      command: |
        git status

go:
  description: |
    go is an open source programming language that makes it simple to build
    secure, scalable systems.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        go get -v ./...
    - description: |
        <description-of-the-command-here>
      command: |
        go mod tidy -v
    - description: |
        <description-of-the-command-here>
      command: |
        gofmt -e -d -s -w ./...
    - description: |
        <description-of-the-command-here>
      command: |
        goimports -w ./
head:
  description: |
    display first lines of a file.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        head -30 ~/.zsh_history

http:
  description: |
    HTTPie: modern, user-friendly command-line HTTP client for the API era.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        http
          --follow
          --auth-type basic
          --auth username:pwd
          "https://localhost/?id=1"

kill:
  description: |
    terminate or signal a process.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        kill SIGTERM 123

kubernetes:
  description: |
    kubectl controls the Kubernetes cluster manager.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        kubectl config current-context
    - description: |
        list all available Kubernetes context names.
      command: |
        kubectl config view | yq '.contexts[].name'
    - description: |
        switch Kubernetes Context.
      command: |
        kubectl config use-context <context-name>
    - description: |
        <description-of-the-command-here>
      command: |
        kubectl get
    - description: |
        <description-of-the-command-here>
      command: |
        kubectl get namespace
    - description: |
        <description-of-the-command-here>
      command: |
        kubectl get pods
    - description: |
        <description-of-the-command-here>
      command: |
        kubens

magick:
  description: |
    convert between image formats as well as resize an image, blur, crop,
    despeckle, dither, draw on, flip, join, re-sample, and much more.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        magick mogrify -monitor -format jpg "*.[hH][eE][iI][cC]"

nc:
  description: |
    arbitrary TCP and UDP connections and listens
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        nc -z elasticsearch 9200
    - description: |
        <description-of-the-command-here>
      command: |
        nc -z redis 6379

ngrok:
  description: |
    ngrok is a secure unified ingress platform that combines your reverse proxy,
    firewall, API gateway and global load balancing into a production service.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        ngrok http 80

nmap:
  description: |
    network exploration tool and security / port scanner.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        nmap -sP 192.168.1.0/24

node:
  description: |
    server-side JavaScript runtime.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        npm login --registry http://npm.domain.dev --auth-type legacy
    - description: |
        <description-of-the-command-here>
      command: |
        npm run build
    - description: |
        <description-of-the-command-here>
      command: |
        npm run test -- -u

nvim:
  description: |
    nvim is a text editor based on Vim.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        nvim /etc/hosts
    - description: |
        <description-of-the-command-here>
      command: |
        nvim ~/.composer/auth.json
    - description: |
        <description-of-the-command-here>
      command: |
        nvim ~/.gitconfig
    - description: |
        <description-of-the-command-here>
      command: |
        nvim ~/.ssh/known_hosts
    - description: |
        <description-of-the-command-here>
      command: |
        nvim ~/.zsh_history

pbcopy:
  description: |
    pbcopy, pbpaste - provide copying and pasting to the pasteboard (the
    Clipboard) from command line.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        pbcopy < ~/.ssh/id_rsa.pub && cat ~/.ssh/id_rsa.pub

ping:
  description: |
    send ICMP ECHO_REQUEST packets to network hosts.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        ping google.com

plumber:
  description: |
    plumber is a CLI devtool for inspecting, piping, messaging and redirecting
    data in message systems like Kafka, RabbitMQ , GCP PubSub and many more.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        plumber read aws-sqs
          -f
          --queue-name=queue_name
          --auto-delete
          --aws-region=eu-central-1
          --aws-access-key-id=AKIASFYAHAJW5NPOUYED
          --aws-secret-access-key=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
    - description: |
        <description-of-the-command-here>
      command: |
        plumber read kafka
          --topic migrations
          --address="localhost:55001"
          --follow
          --json
    - description: |
        <description-of-the-command-here>
      command: |
        plumber write kafka
          --address="localhost:55001"
          --topic migrations
          --input-data '{"hello":"world"}'

rm:
  description: |
    remove directory entries.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        rm -Rf vendor
    - description: |
        <description-of-the-command-here>
      command: |
        rm -Rf node_modules

screen:
  description: |
    screen manager with VT100/ANSI terminal emulation.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty

sh:
  description: |
    sh is a POSIX-compliant command interpreter (shell).  It is implemented by
    re-execing as either bash(1), dash(1), or zsh(1) as determined by the
    symbolic link located at /private/var/select/sh.  If /private/var/select/sh
    does not exist or does not point to a valid shell, sh will use one of the
    supported shells.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        sh -c "while ! nc -z postgres 5432; do sleep 0.1; done"

sh:
  description: |
    shell builtin commands are commands that can be executed within the running
    shell's process.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        source .env
    - description: |
        <description-of-the-command-here>
      command: |
        source ~/.zshrc

ssh:
  description: |
    ssh (SSH client) is a program for logging into a remote machine and for
    executing commands on a remote machine.  It is intended to provide secure
    encrypted communications between two untrusted hosts over an insecure
    network.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        ssh-add --apple-use-keychain ~/.ssh/id_ed25519
    - description: |
        <description-of-the-command-here>
      command: |
        ssh-keygen -t ed25519 -C "jpcercal@gmail.com"
    - description: |
        <description-of-the-command-here>
      command: |
        ssh-keygen -t rsa -b 4096 -C "jpcercal@gmail.com"
    - description: |
        <description-of-the-command-here>
      command: |
        eval "$(ssh-agent -s)"
    - description: |
        <description-of-the-command-here>
      command: |
        touch ~/.ssh/config

lsof:
  description: |
    list open files.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        sudo lsof -i tcp:3000
    - description: |
        <description-of-the-command-here>
      command: |
        sudo lsof -i tcp:80

tail:
  description: |
    the tail utility displays the contents of file or, by default, its standard
    input, to the standard output.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        tail -30 ~/.zsh_history

uname:
  description: |
    the uname command writes the name of the operating system implementation to
    standard output.  When options are specified, strings representing one or
    more system characteristics are written to standard output.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        uname -a

cd:
  description: |
    the cd command allows you to move between directories. The cd command takes
    an argument, usually the name of the folder you want to move to, so the full
    command is cd your-directory.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        cd ~/projects
    - description: |
        <description-of-the-command-here>
      command: |
        cd ~/dotfiles

last:
  description: |
    indicate last logins of users and ttys.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        last reboot

hostname:
  description: |
    set or print name of current host system.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        hostname

brew:
  description: |
    homebrew is the easiest and most flexible way to install the UNIX tools
    Apple didn't include with macOS. It can also install software not packaged
    for your Linux distribution without requiring sudo.
  commands:
    - description: |
        <description-of-the-command-here>
      command: |
        brew install --cask <cask-name>

turbinekreuzberg:
  description: |
    list of commands that I used to use when I worked at 
    Turbine Kreuzberg.
  commands:
    - description: |
        authenticate on aws to connect to turboshop on prod
      command: |
        aws sso login --profile TXBTurboshopDeveloperAccess-440308253360
    - description: |
        connects to turboshop production database
      command: |
        aws s3 cp s3://turboshop-prod-files/deploy.aws-env.yml ~/projects/turbine/turboshop/deploy.aws-env.yml &> /dev/null &&
        kubectl -n turboshop-prod exec -it $(kubectl -n turboshop-prod get pods | grep 'jenkins' | awk '{print $1}') -- bash -c "
          mysql $(cat ~/projects/turbine/turboshop/deploy.aws-env.yml | yq '.image.environment.AWS_SPRYKER_DB_DATABASE')
            --host=$(cat ~/projects/turbine/turboshop/deploy.aws-env.yml | yq '.image.environment.AWS_SPRYKER_DB_HOST')
            --user=$(cat ~/projects/turbine/turboshop/deploy.aws-env.yml | yq '.image.environment.AWS_SPRYKER_DB_ROOT_USERNAME')
            -P $(cat ~/projects/turbine/turboshop/deploy.aws-env.yml | yq '.image.environment.AWS_SPRYKER_DB_PORT')
            -p$(cat ~/projects/turbine/turboshop/deploy.aws-env.yml | yq '.image.environment.AWS_SPRYKER_DB_ROOT_PASSWORD')
        "
